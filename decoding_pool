At the moment we have a tcpriemann client that decodes the received protobuf
packets as they are received.

Our purposal to make use of threads is as follows:

- Every tcpriemann connection will pile up received packets without doing
any decoding.

- Every T ms, the accumulated events will be passed to the the pool thread.

- The pool thread will decode the packets and will place them in variable
  to be used by the main thread and the streams.

Changes:

typedef std::vector<unsigned char> undecoded_msg;
typedef std::vector<undecoded_mg> undecoded_msg_list;

tcpriemann:

  undecoded_riemann_list->add(received);

  // Every T ms
  decoding_pool.add(undecoded_riemann_list);
  undecoded_riemann_list = 0;
  undecoded_riemann_list = new undecoded_riemann_list[];

pool_thread:
  create(pool_size, streams)
  add(undecoded_riemann_list)
  stop();


  --
  std::vector<undecoded_msg_list> undecoded_msg_list_batch;
  std::vector<undecoded_msg_list_batch> worker_threads_input;
  std::vector<std::mutex> worker_threads_mutex;



